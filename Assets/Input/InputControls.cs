//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""Camera"",
            ""id"": ""62377cb8-902a-41b0-8c54-d5d3e3981d10"",
            ""actions"": [
                {
                    ""name"": ""PointerPositionDelta"",
                    ""type"": ""PassThrough"",
                    ""id"": ""380583cb-d230-45ec-b556-003c7f16ecfe"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PointerScrollDelta"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1c459fdf-866d-4143-9c5c-d6a26c2e8386"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PointerLeftDown"",
                    ""type"": ""Button"",
                    ""id"": ""f5dc0b83-730e-4560-bb44-611072bff8a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PointerMiddleDown"",
                    ""type"": ""Button"",
                    ""id"": ""33b8f8fc-ae4c-4811-a8a0-3fe81ae6a364"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PointerRightDown"",
                    ""type"": ""Button"",
                    ""id"": ""0f45aba1-8498-4800-bd20-c7b869f1cafc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0390a37f-6373-46ac-96c8-6aa1e7e6a657"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""PointerPositionDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3519baec-bbf4-47c6-b34e-a11195ca6c33"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""PointerScrollDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae5a4c41-daab-40a4-aed1-a55c188504c7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""PointerLeftDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c705b29-2a60-44e1-9889-e626337cdd97"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""PointerMiddleDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77c43183-b38d-48a9-9a98-e979a4b9eed6"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""PointerRightDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardMouse"",
            ""bindingGroup"": ""KeyboardMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_PointerPositionDelta = m_Camera.FindAction("PointerPositionDelta", throwIfNotFound: true);
        m_Camera_PointerScrollDelta = m_Camera.FindAction("PointerScrollDelta", throwIfNotFound: true);
        m_Camera_PointerLeftDown = m_Camera.FindAction("PointerLeftDown", throwIfNotFound: true);
        m_Camera_PointerMiddleDown = m_Camera.FindAction("PointerMiddleDown", throwIfNotFound: true);
        m_Camera_PointerRightDown = m_Camera.FindAction("PointerRightDown", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_PointerPositionDelta;
    private readonly InputAction m_Camera_PointerScrollDelta;
    private readonly InputAction m_Camera_PointerLeftDown;
    private readonly InputAction m_Camera_PointerMiddleDown;
    private readonly InputAction m_Camera_PointerRightDown;
    public struct CameraActions
    {
        private @InputControls m_Wrapper;
        public CameraActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PointerPositionDelta => m_Wrapper.m_Camera_PointerPositionDelta;
        public InputAction @PointerScrollDelta => m_Wrapper.m_Camera_PointerScrollDelta;
        public InputAction @PointerLeftDown => m_Wrapper.m_Camera_PointerLeftDown;
        public InputAction @PointerMiddleDown => m_Wrapper.m_Camera_PointerMiddleDown;
        public InputAction @PointerRightDown => m_Wrapper.m_Camera_PointerRightDown;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @PointerPositionDelta.started += instance.OnPointerPositionDelta;
            @PointerPositionDelta.performed += instance.OnPointerPositionDelta;
            @PointerPositionDelta.canceled += instance.OnPointerPositionDelta;
            @PointerScrollDelta.started += instance.OnPointerScrollDelta;
            @PointerScrollDelta.performed += instance.OnPointerScrollDelta;
            @PointerScrollDelta.canceled += instance.OnPointerScrollDelta;
            @PointerLeftDown.started += instance.OnPointerLeftDown;
            @PointerLeftDown.performed += instance.OnPointerLeftDown;
            @PointerLeftDown.canceled += instance.OnPointerLeftDown;
            @PointerMiddleDown.started += instance.OnPointerMiddleDown;
            @PointerMiddleDown.performed += instance.OnPointerMiddleDown;
            @PointerMiddleDown.canceled += instance.OnPointerMiddleDown;
            @PointerRightDown.started += instance.OnPointerRightDown;
            @PointerRightDown.performed += instance.OnPointerRightDown;
            @PointerRightDown.canceled += instance.OnPointerRightDown;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @PointerPositionDelta.started -= instance.OnPointerPositionDelta;
            @PointerPositionDelta.performed -= instance.OnPointerPositionDelta;
            @PointerPositionDelta.canceled -= instance.OnPointerPositionDelta;
            @PointerScrollDelta.started -= instance.OnPointerScrollDelta;
            @PointerScrollDelta.performed -= instance.OnPointerScrollDelta;
            @PointerScrollDelta.canceled -= instance.OnPointerScrollDelta;
            @PointerLeftDown.started -= instance.OnPointerLeftDown;
            @PointerLeftDown.performed -= instance.OnPointerLeftDown;
            @PointerLeftDown.canceled -= instance.OnPointerLeftDown;
            @PointerMiddleDown.started -= instance.OnPointerMiddleDown;
            @PointerMiddleDown.performed -= instance.OnPointerMiddleDown;
            @PointerMiddleDown.canceled -= instance.OnPointerMiddleDown;
            @PointerRightDown.started -= instance.OnPointerRightDown;
            @PointerRightDown.performed -= instance.OnPointerRightDown;
            @PointerRightDown.canceled -= instance.OnPointerRightDown;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @Camera => new CameraActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardMouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface ICameraActions
    {
        void OnPointerPositionDelta(InputAction.CallbackContext context);
        void OnPointerScrollDelta(InputAction.CallbackContext context);
        void OnPointerLeftDown(InputAction.CallbackContext context);
        void OnPointerMiddleDown(InputAction.CallbackContext context);
        void OnPointerRightDown(InputAction.CallbackContext context);
    }
}
